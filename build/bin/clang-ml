#!/bin/bash
# clang-ml: A wrapper around clang that uses ML-based optimization

# Path to the CompileML directory
export COMPILEML_PATH=/Users/rahulthennarasu/Documents/GitHub/compileML

# Path to LLVM passes
PASSES_DIR=/Users/rahulthennarasu/Documents/GitHub/compileML/build/src/compiler

# Check if the feature extractor exists
if [ ! -f "${PASSES_DIR}/FeatureExtractor.dylib" ]; then
    echo "Error: FeatureExtractor pass not found at ${PASSES_DIR}/FeatureExtractor.dylib"
    exit 1
fi

# Check if the optimization pass exists
if [ ! -f "${PASSES_DIR}/OptimizationPass.dylib" ]; then
    echo "Error: OptimizationPass not found at ${PASSES_DIR}/OptimizationPass.dylib"
    exit 1
fi

# First, run clang with feature extraction pass
echo "Extracting code features..."
clang -Xclang -load -Xclang "${PASSES_DIR}/FeatureExtractor.dylib" \
      -Xclang -extract-features \
      -c "$@" -emit-llvm -o /tmp/output.bc

# Then apply the ML-based optimization pass
echo "Applying ML-based optimizations..."
clang -Xclang -load -Xclang "${PASSES_DIR}/OptimizationPass.dylib" \
      -Xclang -ml-optimize \
      "$@"

echo "Compilation completed with ML-based optimization selection."
